notes:

* processing functions such as color(i, i, i) don't exist outwith setup or other.

* touchX and touchY seem to be floating point values (on android chrome, at least).
* touchX, touchY and touches[0] are not equivalent.  touchX and touchY will remain set to their last values even when touches[] has size zero (i.e. no touch is taking place).

* call native canvas stuff directly if necessary using the variable drawingContext: https://github.com/processing/p5.js/wiki/p5.js-overview

* define touchStarted(), etc, and have them return false, to prevent default browser panning behaviour, etc.  From: https://github.com/processing/p5.js/wiki/p5.js-overview

* map() will not cap.  For example, if the touch or mousedrag goes out of the window and sends values greater than width, the oscillator frequency mapped with map(touchX, 0, width, 0, 1000) will be set much higher than expected.
Solution: Use constrain() with it.



* For AUDIO consider gibber library, which can sequence drums, for example:
  *   http://charlie-roberts.com/gibber/examples/p5.gibber.bass.example/
  * and can FFT (as can p5): http://charlie-roberts.com/gibber/examples/p5.gibber.modulation.example/
  * read more: and http://charlie-roberts.com/gibber/p5-gibber/

* For INTERACTIVITY, sprites, animation, consider p5.play: http://p5play.molleindustria.org/examples/index.html?fileName=collisions2.js

* dump json with JSON.stringify(myObj).  Use this in the debugger instead of implementing toString() for each class.


* js fiddle with harm seq (mine): http://jsfiddle.net/f54kah0r/

* use setTimeout(fn, time) to register a callback to happen later.  Check this is still preferred in p5.js.

* "use strict"; at the start of each .js and most browsers will fail quickly on, for instance, vars used without first being declared.  x = 10; vs var x=10;  Also use jsHint or jsLint to catch these in the editor, first.
Be careful of source-file concatenation which might lead to "use strict" being assumed for all js content.
